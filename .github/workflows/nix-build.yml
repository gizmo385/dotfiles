name: Build Nix configurations

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches: ['main']

jobs:
  build-linux-configs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            extra-substituters = https://attic.alpenglow.acbc.house/ci-cache
            extra-trusted-public-keys = ci-cache:BXz8Qym/dtncWHsc5VWZY+Se/GCM3gfc1k/5IwRPV5o=

      - name: Tailscale
        uses: tailscale/github-action@v4
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}


      - name: Setup Attic cache
        run: |
          # Login to attic cache and configure nix to use it
          nix-shell -p attic-client --command "attic login ci ${{ secrets.ATTIC_ENDPOINT }} ${{ secrets.ATTIC_TOKEN }}"
          nix-shell -p attic-client --command "attic use ${{ secrets.ATTIC_CACHE_NAME }}"
          # Verify the cache is configured as a substituter
          echo "Configured substituters:"
          nix show-config | grep substituters

      - name: Build x86_64-linux configurations
        run: |
          # Build the key Linux configurations
          nix build .#homeConfigurations.docker.activationPackage --print-build-logs
          nix build .#homeConfigurations.default.activationPackage --print-build-logs
          nix build .#homeConfigurations.gizmonix.activationPackage --print-build-logs
          nix build .#homeConfigurations.gizmo-desktop.activationPackage --print-build-logs
          nix build .#homeConfigurations.alpenglow.activationPackage --print-build-logs
          nix build .#homeConfigurations.gizmo-coder.activationPackage --print-build-logs

      - name: Push to Attic cache
        run: |
          # Push all built derivations to the cache
          nix-shell -p attic-client --command "attic push ${{ secrets.ATTIC_CACHE_NAME }} result*"

      - name: Build summary
        run: |
          echo "âœ… All Linux configurations built successfully"
          echo "ðŸ“¦ Pushed to Attic cache: ${{ secrets.ATTIC_CACHE_NAME }}"
          du -sh result*

  build-macos-configs:
    runs-on: macos-14  # Apple Silicon runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            extra-substituters = https://attic.alpenglow.acbc.house/ci-cache
            extra-trusted-public-keys = ci-cache:BXz8Qym/dtncWHsc5VWZY+Se/GCM3gfc1k/5IwRPV5o=

      - name: Tailscale
        uses: tailscale/github-action@v4
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      - name: Setup Attic cache
        run: |
          # Login to attic cache and configure nix to use it
          nix-shell -p attic-client --command "attic login ci ${{ secrets.ATTIC_ENDPOINT }} ${{ secrets.ATTIC_TOKEN }}"
          nix-shell -p attic-client --command "attic use ${{ secrets.ATTIC_CACHE_NAME }}"
          # Verify the cache is configured as a substituter
          echo "Configured substituters:"
          nix show-config | grep substituters

      - name: Build aarch64-darwin configurations
        run: |
          # Build the macOS configurations
          nix build .#homeConfigurations.gizmo-macbook.activationPackage --print-build-logs
          nix build .#homeConfigurations.M1M-CChapline.activationPackage --print-build-logs
          nix build .#homeConfigurations.M4M-CChapline.activationPackage --print-build-logs

      - name: Push to Attic cache
        run: |
          # Push all built derivations to the cache
          nix-shell -p attic-client --command "attic push ${{ secrets.ATTIC_CACHE_NAME }} result*"

      - name: Build summary
        run: |
          echo "âœ… All macOS configurations built successfully"
          echo "ðŸ“¦ Pushed to Attic cache: ${{ secrets.ATTIC_CACHE_NAME }}"
          du -sh result*
